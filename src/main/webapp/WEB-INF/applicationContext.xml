<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
 xmlns:context="http://www.springframework.org/schema/context"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd ">

<!-- This is the main Spring Framework configuration file.  It works in conjunction with 
spring-mvc-servlet.xml to configure Spring-configured objects (beans).  
applicationContext.xml is the default file loaded by org.springframework.web.context.ContextLoaderListener.  
To split configuration across multiple spring files, consult web.xml -->

    <!-- Scan classes with annotations for spring bean definitions
    see: http://matthiaswessendorf.wordpress.com/2010/04/17/spring-3-0-and-jsr-330-part/
    and: http://richardchesterwood.blogspot.com/2011/03/using-sessions-in-spring-mvc-including.html
    -->
    <context:component-scan base-package="myapp.service" />

    <!-- Load environment-specific properties such as database ports and passwords -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        
        <!-- This setting allows us to override properties with JVM system properties OR host OS system properties -->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        
        <!-- Location of property file(s) -->
        <property name="locations">
            <list>
                <value>classpath:single-environment.properties</value>
                <!-- Use with multiple environments <value>file:///sl/apps/hello-world/conf/application.properties</value> -->
            </list>
        </property>
    </bean>

    <bean id="dataSource"
     class="com.scandilabs.catamaran.entity.support.DefaultMySqlDataSource">
        <property name="url">
            <value>
                ${db.url}
            </value>
        </property>
        <property name="username">
            <value>${db.username}</value>
        </property>
        <property name="password">
            <value>${db.password}</value>
        </property>
    </bean>
    
    <bean id="sessionFactory"
     class="com.scandilabs.catamaran.entity.support.DefaultSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        
        <!-- Tells Hibernate where to look for annotation-marked persistent entity objects -->
        <property name="packagesToScan" value="myapp.entity"/>
    </bean>
    
    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager"
     class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- Inspired by http://joesbitbucket.blogspot.com/2006/08/how-to-inject-dependencies-into-domain.html -->
    <bean id="persistentBaseSessionFactorySetter"  
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod">    
            <value>com.scandilabs.catamaran.entity.support.PersistableBase.setSessionFactory</value>  
        </property>  
        <property name="arguments">    
            <list>      
                <ref bean="sessionFactory"/>    
            </list>  
        </property>
    </bean>    

</beans>
